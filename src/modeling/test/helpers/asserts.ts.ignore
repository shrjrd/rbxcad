import { Array, Number } from "@rbxts/luau-polyfill";
const Number_EPSILON = 2.220446049250313e-16;
const Number_MAX_VALUE = 1.7976931348623157e308;
import { toPolygons } from "../src/geometries/geom3/toPolygons"; //"../../src/core/CSGToOther";
// Compare two polygons together.
// They are identical if they are composed with the same vertices in the same
// relative order
// todo: could be part of csg.js
// todo: should simplify colinear vertices
// @return true if both polygons are identical
const comparePolygons = (a: Poly3, b: Poly3) => {
	// First find one matching vertice
	// We try to find the first vertice of a inside b
	// If there is no such vertice, then a != b
	if (a.vertices.size() !== b.vertices.size() || a.vertices.size() === 0) {
		return false;
	}
	const start = a.vertices[0];
	const index = b.vertices.findIndex((v) => {
		if (!v) {
			return false;
		}

		return v[0] === start[0] && v[1] === start[1] && v[2] === start[2];
	});
	if (index === -1) {
		return false;
	}
	// Rearrange b vertices so that they start with the same vertex as a
	let vs = b.vertices;
	if (index !== 0) {
		vs = Array.concat(Array.slice(b.vertices, index), Array.slice(b.vertices, 0, index));
	}
	// Compare now vertices one by one
	for (let i = 0; i < a.vertices.size(); i++) {
		if (a.vertices[i][0] !== vs[i][0] || a.vertices[i][1] !== vs[i][1] || a.vertices[i][2] !== vs[i][2]) {
			return false;
		}
	}
	return true;
};

const assertSameGeometry = (observed: Geom3, expected: Geom3, failMessage?: string) => {
	if (!containsCSG(observed, expected) || !containsCSG(observed, expected)) {
		failMessage = failMessage === undefined ? "CSG do not have the same geometry" : failMessage;
		//t.fail(failMessage);
		error(failMessage);
	} else {
		//t.pass();
	}
};

// a contains b if b polygons are also found in a
const containsCSG = (observed: Geom3, expected: Geom3) => {
	print("Observed: ", observed);
	print("Expected: ", expected);

	return toPolygons(observed)
		.map((p: Poly3) => {
			let found = false;
			const bp = toPolygons(expected);
			for (let i = 0; i < bp.length; i++) {
				if (comparePolygons(p, bp[i])) {
					found = true;
					break;
				}
			}
			return found;
		})
		.reduce((observed: Geom3, expected: Geom3) => observed && expected);
};

const simplifiedPolygon = (polygon: Poly3) => {
	const vertices = polygon.vertices.map((vertex) => [vertex[0], vertex[1], vertex[2]]);
	const plane = {
		normal: [polygon.plane?.[0], polygon.plane?.[1], polygon.plane?.[2]], //normal: [polygon.plane.normal._x, polygon.plane.normal._y, polygon.plane.normal._z],
		w: polygon.plane?.[3], //w: polygon.plane.w,
	};
	return { positions: vertices, plane, shared: polygon.shared };
};

const simplifieSides = (cag: Geom2) => {
	const sides = cag.sides.map((side) => [
		side[0][0], //side.vertex0.pos._x,
		side[0][1], //side.vertex0.pos._y,
		side[1][0], //side.vertex1.pos._x,
		side[1][1], //side.vertex1.pos._y,
	]);
	return sides.sort();
};

const nearlyEquals = (a: number, b: number, epsilon = 1) => {
	if (a === b) {
		// shortcut, also handles infinities and NaNs
		return true;
	}

	const absA = math.abs(a);
	const absB = math.abs(b);
	const diff = math.abs(a - b);
	if (Number.isNaN(diff)) {
		return false;
	}
	if (a === 0 || b === 0 || diff < Number_EPSILON) {
		// a or b is zero or both are extremely close to it
		// relative error is less meaningful here
		if (diff > epsilon * Number_EPSILON) {
			return false;
		}
	}
	// use relative error
	if (diff / math.min(absA + absB, Number_MAX_VALUE) > epsilon) {
		return false;
	}
	return true;
};

const CAGNearlyEquals = (observed: Geom2, expected: Geom2, precision: number) => {
	if (observed.sides.size() !== expected.sides.size()) {
		return false;
	}
	if (observed.isCanonicalized !== expected.isCanonicalized) {
		return false;
	}
	const obsSides = simplifieSides(observed);
	const expSides = simplifieSides(expected);

	for (let i = 0; i < obsSides.size(); i++) {
		for (let j = 0; j < obsSides[i].size(); j++) {
			if (!nearlyEquals(obsSides[i][j], expSides[i][j], precision)) {
				return false;
			}
		}
	}

	return true;
};

export default {
	assertSameGeometry,
	comparePolygons,
	simplifiedPolygon,
	simplifieSides,
	CAGNearlyEquals,
};
