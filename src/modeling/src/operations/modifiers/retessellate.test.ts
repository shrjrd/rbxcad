import { expect, test } from "@rbxts/jest-globals";
import { Array } from "@rbxts/luau-polyfill";

import { comparePolygonsAsPoints } from "../../../test/helpers";
import { geom3 } from "../../geometries";
import retessellate from "./retessellate";

test("geom3: retessellate() should create proper geometry from empty geometries", () => {
	const obj1 = geom3.create();

	// one empty geometry
	const ret1 = retessellate(obj1);
	const exp1 = {
		polygons: [],
		isRetesselated: true,
		transforms: [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1],
	};
	expect(ret1).toEqual(exp1);
});

test("geom3: retessellate() should create proper geometry from solid geometries", () => {
	const box1: Vec3[][] = [
		[
			[-5.0, -5.0, -5.0],
			[-5.0, -5.0, 5.0],
			[-5.0, 5.0, 5.0],
			[-5.0, 5.0, -5.0],
		],
		[
			[5.0, -5.0, -5.0],
			[5.0, 5.0, -5.0],
			[5.0, 5.0, 5.0],
			[5.0, -5.0, 5.0],
		],
		[
			[-5.0, -5.0, -5.0],
			[5.0, -5.0, -5.0],
			[5.0, -5.0, 5.0],
			[-5.0, -5.0, 5.0],
		],
		[
			[-5.0, 5.0, -5.0],
			[-5.0, 5.0, 5.0],
			[5.0, 5.0, 5.0],
			[5.0, 5.0, -5.0],
		],
		[
			[-5.0, -5.0, -5.0],
			[-5.0, 5.0, -5.0],
			[5.0, 5.0, -5.0],
			[5.0, -5.0, -5.0],
		],
		[
			[-5.0, -5.0, 5.0],
			[5.0, -5.0, 5.0],
			[5.0, 5.0, 5.0],
			[-5.0, 5.0, 5.0],
		],
	];

	const box2: Vec3[][] = [
		[
			[15.0, 15.0, 15.0],
			[15.0, 15.0, 25.0],
			[15.0, 25.0, 25.0],
			[15.0, 25.0, 15.0],
		],
		[
			[25.0, 15.0, 15.0],
			[25.0, 25.0, 15.0],
			[25.0, 25.0, 25.0],
			[25.0, 15.0, 25.0],
		],
		[
			[15.0, 15.0, 15.0],
			[25.0, 15.0, 15.0],
			[25.0, 15.0, 25.0],
			[15.0, 15.0, 25.0],
		],
		[
			[15.0, 25.0, 15.0],
			[15.0, 25.0, 25.0],
			[25.0, 25.0, 25.0],
			[25.0, 25.0, 15.0],
		],
		[
			[15.0, 15.0, 15.0],
			[15.0, 25.0, 15.0],
			[25.0, 25.0, 15.0],
			[25.0, 15.0, 15.0],
		],
		[
			[15.0, 15.0, 25.0],
			[25.0, 15.0, 25.0],
			[25.0, 25.0, 25.0],
			[15.0, 25.0, 25.0],
		],
	];

	const box3: Vec3[][] = [
		[
			[-5.0, -5.0, -5.0],
			[-5.0, -5.0, 5.0],
			[-5.0, 5.0, 5.0],
			[-5.0, 5.0, -5.0],
		],
		[
			[5.0, -5.0, -5.0],
			[5.0, 5.0, -5.0],
			[5.0, 5.0, 5.0],
			[5.0, -5.0, 5.0],
		],
		[
			[-5.0, -5.0, -5.0],
			[5.0, -5.0, -5.0],
			[5.0, -5.0, 5.0],
			[-5.0, -5.0, 5.0],
		],
		[
			[-5.0, 5.0, -5.0],
			[-5.0, 5.0, 5.0],
			[5.0, 5.0, 5.0],
			[5.0, 5.0, -5.0],
		],
		[
			[-5.0, -5.0, -5.0],
			[-5.0, 5.0, -5.0],
			[5.0, 5.0, -5.0],
			[5.0, -5.0, -5.0],
		],
		[
			[-5.0, -5.0, 5.0],
			[-5.0, -5.0, 15.0],
			[-5.0, 5.0, 15.0],
			[-5.0, 5.0, 5.0],
		],
		[
			[5.0, -5.0, 5.0],
			[5.0, 5.0, 5.0],
			[5.0, 5.0, 15.0],
			[5.0, -5.0, 15.0],
		],
		[
			[-5.0, -5.0, 5.0],
			[5.0, -5.0, 5.0],
			[5.0, -5.0, 15.0],
			[-5.0, -5.0, 15.0],
		],
		[
			[-5.0, 5.0, 5.0],
			[-5.0, 5.0, 15.0],
			[5.0, 5.0, 15.0],
			[5.0, 5.0, 5.0],
		],
		[
			[-5.0, -5.0, 15.0],
			[5.0, -5.0, 15.0],
			[5.0, 5.0, 15.0],
			[-5.0, 5.0, 15.0],
		],
	];

	const box4: Vec3[][] = [
		[
			[-5.0, -5.0, -5.0],
			[-5.0, -5.0, 5.0],
			[-5.0, 5.0, 5.0],
			[-5.0, 5.0, -5.0],
		],
		[
			[-5.0, -5.0, -5.0],
			[5.0, -5.0, -5.0],
			[5.0, -5.0, 5.0],
			[-5.0, -5.0, 5.0],
		],
		[
			[-5.0, -5.0, -5.0],
			[-5.0, 5.0, -5.0],
			[5.0, 5.0, -5.0],
			[5.0, -5.0, -5.0],
		],
		[
			[5.0, -5.0, -5.0],
			[5.0, 0.0, -5.0],
			[5.0, 0.0, 5.0],
			[5.0, -5.0, 5.0],
		],
		[
			[-5.0, 5.0, -5.0],
			[-5.0, 5.0, 5.0],
			[0.0, 5.0, 5.0],
			[0.0, 5.0, -5.0],
		],
		[
			[-5.0, -5.0, 5.0],
			[0.0, -5.0, 5.0],
			[0.0, 5.0, 5.0],
			[-5.0, 5.0, 5.0],
		],
		[
			[5.0, 0.0, -5.0],
			[5.0, 5.0, -5.0],
			[5.0, 5.0, 0.0],
			[5.0, 0.0, 0.0],
		],
		[
			[5.0, 5.0, 0.0],
			[5.0, 5.0, -5.0],
			[0.0, 5.0, -5.0],
			[0.0, 5.0, 0.0],
		],
		[
			[0.0, -5.0, 5.0],
			[5.0, -5.0, 5.0],
			[5.0, 0.0, 5.0],
			[0.0, 0.0, 5.0],
		],
		[
			[10.0, 0.0, 0.0],
			[10.0, 10.0, 0.0],
			[10.0, 10.0, 10.0],
			[10.0, 0.0, 10.0],
		],
		[
			[0.0, 10.0, 0.0],
			[0.0, 10.0, 10.0],
			[10.0, 10.0, 10.0],
			[10.0, 10.0, 0.0],
		],
		[
			[0.0, 0.0, 10.0],
			[10.0, 0.0, 10.0],
			[10.0, 10.0, 10.0],
			[0.0, 10.0, 10.0],
		],
		[
			[0.0, 5.0, 10.0],
			[0.0, 10.0, 10.0],
			[0.0, 10.0, 0.0],
			[0.0, 5.0, 0.0],
		],
		[
			[5.0, 0.0, 0.0],
			[10.0, 0.0, 0.0],
			[10.0, 0.0, 10.0],
			[5.0, 0.0, 10.0],
		],
		[
			[5.0, 10.0, 0.0],
			[10.0, 10.0, 0.0],
			[10.0, 0.0, 0.0],
			[5.0, 0.0, 0.0],
		],
		[
			[0.0, 0.0, 5.0],
			[0.0, 0.0, 10.0],
			[0.0, 5.0, 10.0],
			[0.0, 5.0, 5.0],
		],
		[
			[5.0, 0.0, 5.0],
			[5.0, 0.0, 10.0],
			[0.0, 0.0, 10.0],
			[0.0, 0.0, 5.0],
		],
		[
			[0.0, 5.0, 0.0],
			[0.0, 10.0, 0.0],
			[5.0, 10.0, 0.0],
			[5.0, 5.0, 0.0],
		],
	];

	const box5: Vec3[][] = [
		// with coplanar polygons
		[
			[-5.0, -5.0, -5.0],
			[-5.0, -5.0, 5.0],
			[-5.0, 5.0, 5.0],
			[-5.0, 5.0, -5.0],
		], // end
		[
			[10.0, -5.0, -5.0],
			[10.0, -5.0, 5.0],
			[-5.0, -5.0, 5.0],
			[-5.0, -5.0, -5.0],
		], // side
		[
			[10.0, 5.0, 5.0],
			[10.0, 5.0, -5.0],
			[-5.0, 5.0, -5.0],
			[-5.0, 5.0, 5.0],
		], // side
		[
			[10.0, 5.0, -5.0],
			[10.0, -5.0, -5.0],
			[-5.0, -5.0, -5.0],
			[-5.0, 5.0, -5.0],
		], // bottom
		[
			[10.0, -5.0, 5.0],
			[10.0, 0.0, 5.0],
			[-5.0, 0.0, 5.0],
			[-5.0, -5.0, 5.0],
		], // top
		[
			[10.0, 0.0, 5.0],
			[10.0, 5.0, 5.0],
			[-5.0, 5.0, 5.0],
			[-5.0, 0.0, 5.0],
		], // top
		[
			[10.0, -5.0, -5.0],
			[10.0, 5.0, -5.0],
			[10.0, 5.0, 5.0],
			[10.0, -5.0, 5.0],
		], // end
	];

	const obj1 = geom3.fromPoints(box1);
	const obj2 = geom3.fromPoints(Array.concat(box1, box2)); //geom3.fromPoints(box1.concat(box2)); // combined geometry
	const obj3 = geom3.fromPoints(box3);
	const obj4 = geom3.fromPoints(box4);
	const obj5 = geom3.fromPoints(box5);

	// one solid geometry
	const ret1 = retessellate(obj1);
	const pts1 = geom3.toPoints(ret1);
	const exp1: Vec3[][] = [
		[
			[-5, -5, -5],
			[-5, -5, 5],
			[-5, 5, 5],
			[-5, 5, -5],
		],
		[
			[5, -5, -5],
			[5, 5, -5],
			[5, 5, 5],
			[5, -5, 5],
		],
		[
			[-5, -5, -5],
			[5, -5, -5],
			[5, -5, 5],
			[-5, -5, 5],
		],
		[
			[-5, 5, -5],
			[-5, 5, 5],
			[5, 5, 5],
			[5, 5, -5],
		],
		[
			[-5, -5, -5],
			[-5, 5, -5],
			[5, 5, -5],
			[5, -5, -5],
		],
		[
			[-5, -5, 5],
			[5, -5, 5],
			[5, 5, 5],
			[-5, 5, 5],
		],
	];
	expect(comparePolygonsAsPoints(pts1, exp1)).toBe(true);

	// two non-overlapping geometries
	const ret2 = retessellate(obj2);
	const pts2 = geom3.toPoints(ret2);
	const exp2: Vec3[][] = [
		[
			[-5, -5, -5],
			[-5, -5, 5],
			[-5, 5, 5],
			[-5, 5, -5],
		],
		[
			[5, -5, -5],
			[5, 5, -5],
			[5, 5, 5],
			[5, -5, 5],
		],
		[
			[-5, -5, -5],
			[5, -5, -5],
			[5, -5, 5],
			[-5, -5, 5],
		],
		[
			[-5, 5, -5],
			[-5, 5, 5],
			[5, 5, 5],
			[5, 5, -5],
		],
		[
			[-5, -5, -5],
			[-5, 5, -5],
			[5, 5, -5],
			[5, -5, -5],
		],
		[
			[-5, -5, 5],
			[5, -5, 5],
			[5, 5, 5],
			[-5, 5, 5],
		],
		[
			[15, 15, 15],
			[15, 15, 25],
			[15, 25, 25],
			[15, 25, 15],
		],
		[
			[25, 15, 15],
			[25, 25, 15],
			[25, 25, 25],
			[25, 15, 25],
		],
		[
			[15, 15, 15],
			[25, 15, 15],
			[25, 15, 25],
			[15, 15, 25],
		],
		[
			[15, 25, 15],
			[15, 25, 25],
			[25, 25, 25],
			[25, 25, 15],
		],
		[
			[15, 15, 15],
			[15, 25, 15],
			[25, 25, 15],
			[25, 15, 15],
		],
		[
			[15, 15, 25],
			[25, 15, 25],
			[25, 25, 25],
			[15, 25, 25],
		],
	];
	expect(comparePolygonsAsPoints(pts2, exp2)).toBe(true);

	// two touching geometries (faces)
	const ret3 = retessellate(obj3);
	const pts3 = geom3.toPoints(ret3);
	const exp3: Vec3[][] = [
		[
			[-5, 5, 15],
			[-5, 5, -5],
			[-5, -5, -5],
			[-5, -5, 15],
		],
		[
			[5, -5, 15],
			[5, -5, -5],
			[5, 5, -5],
			[5, 5, 15],
		],
		[
			[-5, -5, 15],
			[-5, -5, -5],
			[5, -5, -5],
			[5, -5, 15],
		],
		[
			[5, 5, 15],
			[5, 5, -5],
			[-5, 5, -5],
			[-5, 5, 15],
		],
		[
			[-5, -5, -5],
			[-5, 5, -5],
			[5, 5, -5],
			[5, -5, -5],
		],
		[
			[-5, -5, 15],
			[5, -5, 15],
			[5, 5, 15],
			[-5, 5, 15],
		],
	];
	expect(comparePolygonsAsPoints(pts3, exp3)).toBe(true);

	// two overlapping geometries
	const ret4 = retessellate(obj4);
	const pts4 = geom3.toPoints(ret4);
	const exp4: Vec3[][] = [
		[
			[-5, -5, -5],
			[-5, -5, 5],
			[-5, 5, 5],
			[-5, 5, -5],
		],
		[
			[-5, -5, -5],
			[5, -5, -5],
			[5, -5, 5],
			[-5, -5, 5],
		],
		[
			[-5, -5, -5],
			[-5, 5, -5],
			[5, 5, -5],
			[5, -5, -5],
		],
		[
			[5, -5, 5],
			[5, -5, 0],
			[5, 0, 0],
			[5, 0, 5],
		],
		[
			[5, -5, 0],
			[5, -5, -5],
			[5, 5, -5],
			[5, 5, 0],
		],
		[
			[0, 5, 5],
			[0, 5, 0],
			[-5, 5, 0],
			[-5, 5, 5],
		],
		[
			[5, 5, 0],
			[5, 5, -5],
			[-5, 5, -5],
			[-5, 5, 0],
		],
		[
			[-5, 5, 5],
			[-5, 0, 5],
			[0, 0, 5],
			[0, 5, 5],
		],
		[
			[-5, 0, 5],
			[-5, -5, 5],
			[5, -5, 5],
			[5, 0, 5],
		],
		[
			[10, 0, 0],
			[10, 10, 0],
			[10, 10, 10],
			[10, 0, 10],
		],
		[
			[0, 10, 0],
			[0, 10, 10],
			[10, 10, 10],
			[10, 10, 0],
		],
		[
			[0, 0, 10],
			[10, 0, 10],
			[10, 10, 10],
			[0, 10, 10],
		],
		[
			[0, 10, 10],
			[0, 10, 5],
			[0, 0, 5],
			[0, 0, 10],
		],
		[
			[0, 10, 5],
			[0, 10, 0],
			[0, 5, 0],
			[0, 5, 5],
		],
		[
			[0, 0, 10],
			[0, 0, 5],
			[10, 0, 5],
			[10, 0, 10],
		],
		[
			[5, 0, 5],
			[5, -0, 0],
			[10, -0, 0],
			[10, 0, 5],
		],
		[
			[10, 10, 0],
			[10, 5, 0],
			[0, 5, 0],
			[0, 10, 0],
		],
		[
			[10, 5, 0],
			[10, 0, 0],
			[5, 0, 0],
			[5, 5, 0],
		],
	];
	expect(comparePolygonsAsPoints(pts4, exp4)).toBe(true);

	// coplanar polygons
	const ret5 = retessellate(obj5);
	const pts5 = geom3.toPoints(ret5);
	const exp5: Vec3[][] = [
		[
			[-5, -5, -5],
			[-5, -5, 5],
			[-5, 5, 5],
			[-5, 5, -5],
		],
		[
			[10, -5, -5],
			[10, -5, 5],
			[-5, -5, 5],
			[-5, -5, -5],
		],
		[
			[10, 5, 5],
			[10, 5, -5],
			[-5, 5, -5],
			[-5, 5, 5],
		],
		[
			[10, 5, -5],
			[10, -5, -5],
			[-5, -5, -5],
			[-5, 5, -5],
		],
		[
			[-5, 5, 5],
			[-5, -5, 5],
			[10, -5, 5],
			[10, 5, 5],
		],
		[
			[10, -5, -5],
			[10, 5, -5],
			[10, 5, 5],
			[10, -5, 5],
		],
	];
	expect(comparePolygonsAsPoints(pts5, exp5)).toBe(true);
});
