import { expect, test } from "@rbxts/jest-globals";

import comparePolygonsAsPoints from "../../test/helpers/comparePolygonsAsPoints";
import geom3 from "../geometries/geom3";
import { geodesicSphere } from "./geodesicSphere";

test("geodesicSphere (defaults)", () => {
	const obs = geodesicSphere();
	const pts = geom3.toPoints(obs);
	expect(() => geom3.validate(obs)).never.toThrow();
	expect(pts.size()).toBe(20);
});

test("geodesicSphere (options)", () => {
	// test radius
	let obs = geodesicSphere({ radius: 5 });
	let pts = geom3.toPoints(obs);
	const exp: Vec3[][] = [
		[
			[4.253254557317035, 0, 2.628654726407001],
			[2.628654726407001, -4.253254557317035, 0],
			[4.253254557317035, 0, -2.628654726407001],
		],
		[
			[4.253254557317035, 0, -2.628654726407001],
			[2.628654726407001, 4.253254557317035, 0],
			[4.253254557317035, 0, 2.628654726407001],
		],
		[
			[4.253254557317035, 0, -2.628654726407001],
			[0, -2.628654726407001, -4.253254557317035],
			[0, 2.628654726407001, -4.253254557317035],
		],
		[
			[4.253254557317035, 0, -2.628654726407001],
			[0, 2.628654726407001, -4.253254557317035],
			[2.628654726407001, 4.253254557317035, 0],
		],
		[
			[4.253254557317035, 0, -2.628654726407001],
			[2.628654726407001, -4.253254557317035, 0],
			[0, -2.628654726407001, -4.253254557317035],
		],
		[
			[0, -2.628654726407001, 4.253254557317035],
			[4.253254557317035, 0, 2.628654726407001],
			[0, 2.628654726407001, 4.253254557317035],
		],
		[
			[2.628654726407001, -4.253254557317035, 0],
			[4.253254557317035, 0, 2.628654726407001],
			[0, -2.628654726407001, 4.253254557317035],
		],
		[
			[4.253254557317035, 0, 2.628654726407001],
			[2.628654726407001, 4.253254557317035, 0],
			[0, 2.628654726407001, 4.253254557317035],
		],
		[
			[-4.253254557317035, 0, -2.628654726407001],
			[-2.628654726407001, -4.253254557317035, 0],
			[-4.253254557317035, 0, 2.628654726407001],
		],
		[
			[-4.253254557317035, 0, 2.628654726407001],
			[-2.628654726407001, 4.253254557317035, 0],
			[-4.253254557317035, 0, -2.628654726407001],
		],
		[
			[0, -2.628654726407001, 4.253254557317035],
			[0, 2.628654726407001, 4.253254557317035],
			[-4.253254557317035, 0, 2.628654726407001],
		],
		[
			[-4.253254557317035, 0, 2.628654726407001],
			[-2.628654726407001, -4.253254557317035, 0],
			[0, -2.628654726407001, 4.253254557317035],
		],
		[
			[0, 2.628654726407001, 4.253254557317035],
			[-2.628654726407001, 4.253254557317035, 0],
			[-4.253254557317035, 0, 2.628654726407001],
		],
		[
			[0, 2.628654726407001, -4.253254557317035],
			[0, -2.628654726407001, -4.253254557317035],
			[-4.253254557317035, 0, -2.628654726407001],
		],
		[
			[-4.253254557317035, 0, -2.628654726407001],
			[-2.628654726407001, 4.253254557317035, 0],
			[0, 2.628654726407001, -4.253254557317035],
		],
		[
			[-4.253254557317035, 0, -2.628654726407001],
			[0, -2.628654726407001, -4.253254557317035],
			[-2.628654726407001, -4.253254557317035, 0],
		],
		[
			[0, -2.628654726407001, 4.253254557317035],
			[-2.628654726407001, -4.253254557317035, 0],
			[2.628654726407001, -4.253254557317035, 0],
		],
		[
			[0, 2.628654726407001, 4.253254557317035],
			[2.628654726407001, 4.253254557317035, 0],
			[-2.628654726407001, 4.253254557317035, 0],
		],
		[
			[0, 2.628654726407001, -4.253254557317035],
			[-2.628654726407001, 4.253254557317035, 0],
			[2.628654726407001, 4.253254557317035, 0],
		],
		[
			[0, -2.628654726407001, -4.253254557317035],
			[2.628654726407001, -4.253254557317035, 0],
			[-2.628654726407001, -4.253254557317035, 0],
		],
	];

	expect(() => geom3.validate(obs)).never.toThrow();
	expect(pts.size()).toBe(20);
	expect(comparePolygonsAsPoints(pts, exp)).toBe(true);

	// test frequency
	obs = geodesicSphere({ radius: 5, frequency: 18 });
	pts = geom3.toPoints(obs);

	//t.notThrows.skip(() => geom3.validate(obs));
	expect(() => geom3.validate(obs)).never.toThrow();
	expect(pts.size()).toBe(180);
});

test("geodesicSphere (zero radius)", () => {
	const obs = geodesicSphere({ radius: 0 });
	const pts = geom3.toPoints(obs);
	expect(() => geom3.validate(obs)).never.toThrow();
	expect(pts.size()).toBe(0);
});
